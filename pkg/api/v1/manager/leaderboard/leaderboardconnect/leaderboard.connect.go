// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/manager/leaderboard/leaderboard.proto

package leaderboardconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	leaderboard "github.com/megakuul/zen/pkg/api/v1/manager/leaderboard"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LeaderboardServiceName is the fully-qualified name of the LeaderboardService service.
	LeaderboardServiceName = "v1.manager.leaderboard.LeaderboardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LeaderboardServiceGetProcedure is the fully-qualified name of the LeaderboardService's Get RPC.
	LeaderboardServiceGetProcedure = "/v1.manager.leaderboard.LeaderboardService/Get"
)

// LeaderboardServiceClient is a client for the v1.manager.leaderboard.LeaderboardService service.
type LeaderboardServiceClient interface {
	Get(context.Context, *connect.Request[leaderboard.GetRequest]) (*connect.Response[leaderboard.GetResponse], error)
}

// NewLeaderboardServiceClient constructs a client for the v1.manager.leaderboard.LeaderboardService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLeaderboardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LeaderboardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	leaderboardServiceMethods := leaderboard.File_v1_manager_leaderboard_leaderboard_proto.Services().ByName("LeaderboardService").Methods()
	return &leaderboardServiceClient{
		get: connect.NewClient[leaderboard.GetRequest, leaderboard.GetResponse](
			httpClient,
			baseURL+LeaderboardServiceGetProcedure,
			connect.WithSchema(leaderboardServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
	}
}

// leaderboardServiceClient implements LeaderboardServiceClient.
type leaderboardServiceClient struct {
	get *connect.Client[leaderboard.GetRequest, leaderboard.GetResponse]
}

// Get calls v1.manager.leaderboard.LeaderboardService.Get.
func (c *leaderboardServiceClient) Get(ctx context.Context, req *connect.Request[leaderboard.GetRequest]) (*connect.Response[leaderboard.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// LeaderboardServiceHandler is an implementation of the v1.manager.leaderboard.LeaderboardService
// service.
type LeaderboardServiceHandler interface {
	Get(context.Context, *connect.Request[leaderboard.GetRequest]) (*connect.Response[leaderboard.GetResponse], error)
}

// NewLeaderboardServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLeaderboardServiceHandler(svc LeaderboardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	leaderboardServiceMethods := leaderboard.File_v1_manager_leaderboard_leaderboard_proto.Services().ByName("LeaderboardService").Methods()
	leaderboardServiceGetHandler := connect.NewUnaryHandler(
		LeaderboardServiceGetProcedure,
		svc.Get,
		connect.WithSchema(leaderboardServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.manager.leaderboard.LeaderboardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LeaderboardServiceGetProcedure:
			leaderboardServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLeaderboardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLeaderboardServiceHandler struct{}

func (UnimplementedLeaderboardServiceHandler) Get(context.Context, *connect.Request[leaderboard.GetRequest]) (*connect.Response[leaderboard.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.manager.leaderboard.LeaderboardService.Get is not implemented"))
}
