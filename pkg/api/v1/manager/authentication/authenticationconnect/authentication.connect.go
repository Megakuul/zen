// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/manager/authentication/authentication.proto

package authenticationconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	authentication "github.com/megakuul/zen/pkg/api/v1/manager/authentication"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthenticationServiceName is the fully-qualified name of the AuthenticationService service.
	AuthenticationServiceName = "v1.manager.authentication.AuthenticationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthenticationServiceGetProcedure is the fully-qualified name of the AuthenticationService's Get
	// RPC.
	AuthenticationServiceGetProcedure = "/v1.manager.authentication.AuthenticationService/Get"
	// AuthenticationServiceRevokeProcedure is the fully-qualified name of the AuthenticationService's
	// Revoke RPC.
	AuthenticationServiceRevokeProcedure = "/v1.manager.authentication.AuthenticationService/Revoke"
)

// AuthenticationServiceClient is a client for the v1.manager.authentication.AuthenticationService
// service.
type AuthenticationServiceClient interface {
	Get(context.Context, *connect.Request[authentication.GetRequest]) (*connect.Response[authentication.GetResponse], error)
	Revoke(context.Context, *connect.Request[authentication.RevokeRequest]) (*connect.Response[authentication.RevokeResponse], error)
}

// NewAuthenticationServiceClient constructs a client for the
// v1.manager.authentication.AuthenticationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthenticationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthenticationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authenticationServiceMethods := authentication.File_v1_manager_authentication_authentication_proto.Services().ByName("AuthenticationService").Methods()
	return &authenticationServiceClient{
		get: connect.NewClient[authentication.GetRequest, authentication.GetResponse](
			httpClient,
			baseURL+AuthenticationServiceGetProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		revoke: connect.NewClient[authentication.RevokeRequest, authentication.RevokeResponse](
			httpClient,
			baseURL+AuthenticationServiceRevokeProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("Revoke")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authenticationServiceClient implements AuthenticationServiceClient.
type authenticationServiceClient struct {
	get    *connect.Client[authentication.GetRequest, authentication.GetResponse]
	revoke *connect.Client[authentication.RevokeRequest, authentication.RevokeResponse]
}

// Get calls v1.manager.authentication.AuthenticationService.Get.
func (c *authenticationServiceClient) Get(ctx context.Context, req *connect.Request[authentication.GetRequest]) (*connect.Response[authentication.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Revoke calls v1.manager.authentication.AuthenticationService.Revoke.
func (c *authenticationServiceClient) Revoke(ctx context.Context, req *connect.Request[authentication.RevokeRequest]) (*connect.Response[authentication.RevokeResponse], error) {
	return c.revoke.CallUnary(ctx, req)
}

// AuthenticationServiceHandler is an implementation of the
// v1.manager.authentication.AuthenticationService service.
type AuthenticationServiceHandler interface {
	Get(context.Context, *connect.Request[authentication.GetRequest]) (*connect.Response[authentication.GetResponse], error)
	Revoke(context.Context, *connect.Request[authentication.RevokeRequest]) (*connect.Response[authentication.RevokeResponse], error)
}

// NewAuthenticationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthenticationServiceHandler(svc AuthenticationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authenticationServiceMethods := authentication.File_v1_manager_authentication_authentication_proto.Services().ByName("AuthenticationService").Methods()
	authenticationServiceGetHandler := connect.NewUnaryHandler(
		AuthenticationServiceGetProcedure,
		svc.Get,
		connect.WithSchema(authenticationServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceRevokeHandler := connect.NewUnaryHandler(
		AuthenticationServiceRevokeProcedure,
		svc.Revoke,
		connect.WithSchema(authenticationServiceMethods.ByName("Revoke")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.manager.authentication.AuthenticationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthenticationServiceGetProcedure:
			authenticationServiceGetHandler.ServeHTTP(w, r)
		case AuthenticationServiceRevokeProcedure:
			authenticationServiceRevokeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthenticationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthenticationServiceHandler struct{}

func (UnimplementedAuthenticationServiceHandler) Get(context.Context, *connect.Request[authentication.GetRequest]) (*connect.Response[authentication.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.manager.authentication.AuthenticationService.Get is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) Revoke(context.Context, *connect.Request[authentication.RevokeRequest]) (*connect.Response[authentication.RevokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.manager.authentication.AuthenticationService.Revoke is not implemented"))
}
