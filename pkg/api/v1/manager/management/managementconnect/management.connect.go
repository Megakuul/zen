// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/manager/management/management.proto

package managementconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	management "github.com/megakuul/zen/pkg/api/v1/manager/management"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "v1.manager.management.ManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagementServiceGetProcedure is the fully-qualified name of the ManagementService's Get RPC.
	ManagementServiceGetProcedure = "/v1.manager.management.ManagementService/Get"
	// ManagementServiceDeleteProcedure is the fully-qualified name of the ManagementService's Delete
	// RPC.
	ManagementServiceDeleteProcedure = "/v1.manager.management.ManagementService/Delete"
)

// ManagementServiceClient is a client for the v1.manager.management.ManagementService service.
type ManagementServiceClient interface {
	Get(context.Context, *connect.Request[management.GetRequest]) (*connect.Response[management.GetResponse], error)
	Delete(context.Context, *connect.Request[management.DeleteRequest]) (*connect.Response[management.DeleteResponse], error)
}

// NewManagementServiceClient constructs a client for the v1.manager.management.ManagementService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	managementServiceMethods := management.File_v1_manager_management_management_proto.Services().ByName("ManagementService").Methods()
	return &managementServiceClient{
		get: connect.NewClient[management.GetRequest, management.GetResponse](
			httpClient,
			baseURL+ManagementServiceGetProcedure,
			connect.WithSchema(managementServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[management.DeleteRequest, management.DeleteResponse](
			httpClient,
			baseURL+ManagementServiceDeleteProcedure,
			connect.WithSchema(managementServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	get    *connect.Client[management.GetRequest, management.GetResponse]
	delete *connect.Client[management.DeleteRequest, management.DeleteResponse]
}

// Get calls v1.manager.management.ManagementService.Get.
func (c *managementServiceClient) Get(ctx context.Context, req *connect.Request[management.GetRequest]) (*connect.Response[management.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls v1.manager.management.ManagementService.Delete.
func (c *managementServiceClient) Delete(ctx context.Context, req *connect.Request[management.DeleteRequest]) (*connect.Response[management.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ManagementServiceHandler is an implementation of the v1.manager.management.ManagementService
// service.
type ManagementServiceHandler interface {
	Get(context.Context, *connect.Request[management.GetRequest]) (*connect.Response[management.GetResponse], error)
	Delete(context.Context, *connect.Request[management.DeleteRequest]) (*connect.Response[management.DeleteResponse], error)
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managementServiceMethods := management.File_v1_manager_management_management_proto.Services().ByName("ManagementService").Methods()
	managementServiceGetHandler := connect.NewUnaryHandler(
		ManagementServiceGetProcedure,
		svc.Get,
		connect.WithSchema(managementServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceDeleteHandler := connect.NewUnaryHandler(
		ManagementServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(managementServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.manager.management.ManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagementServiceGetProcedure:
			managementServiceGetHandler.ServeHTTP(w, r)
		case ManagementServiceDeleteProcedure:
			managementServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) Get(context.Context, *connect.Request[management.GetRequest]) (*connect.Response[management.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.manager.management.ManagementService.Get is not implemented"))
}

func (UnimplementedManagementServiceHandler) Delete(context.Context, *connect.Request[management.DeleteRequest]) (*connect.Response[management.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.manager.management.ManagementService.Delete is not implemented"))
}
