// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/scheduler/planning/planning.proto

package planningconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	planning "github.com/megakuul/zen/pkg/api/v1/scheduler/planning"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PlanningServiceName is the fully-qualified name of the PlanningService service.
	PlanningServiceName = "v1.scheduler.planning.PlanningService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlanningServiceGetProcedure is the fully-qualified name of the PlanningService's Get RPC.
	PlanningServiceGetProcedure = "/v1.scheduler.planning.PlanningService/Get"
	// PlanningServiceUpsertProcedure is the fully-qualified name of the PlanningService's Upsert RPC.
	PlanningServiceUpsertProcedure = "/v1.scheduler.planning.PlanningService/Upsert"
	// PlanningServiceDeleteProcedure is the fully-qualified name of the PlanningService's Delete RPC.
	PlanningServiceDeleteProcedure = "/v1.scheduler.planning.PlanningService/Delete"
)

// PlanningServiceClient is a client for the v1.scheduler.planning.PlanningService service.
type PlanningServiceClient interface {
	Get(context.Context, *connect.Request[planning.GetRequest]) (*connect.Response[planning.GetResponse], error)
	Upsert(context.Context, *connect.Request[planning.UpsertRequest]) (*connect.Response[planning.UpsertResponse], error)
	Delete(context.Context, *connect.Request[planning.DeleteRequest]) (*connect.Response[planning.DeleteResponse], error)
}

// NewPlanningServiceClient constructs a client for the v1.scheduler.planning.PlanningService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlanningServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PlanningServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	planningServiceMethods := planning.File_v1_scheduler_planning_planning_proto.Services().ByName("PlanningService").Methods()
	return &planningServiceClient{
		get: connect.NewClient[planning.GetRequest, planning.GetResponse](
			httpClient,
			baseURL+PlanningServiceGetProcedure,
			connect.WithSchema(planningServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		upsert: connect.NewClient[planning.UpsertRequest, planning.UpsertResponse](
			httpClient,
			baseURL+PlanningServiceUpsertProcedure,
			connect.WithSchema(planningServiceMethods.ByName("Upsert")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[planning.DeleteRequest, planning.DeleteResponse](
			httpClient,
			baseURL+PlanningServiceDeleteProcedure,
			connect.WithSchema(planningServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// planningServiceClient implements PlanningServiceClient.
type planningServiceClient struct {
	get    *connect.Client[planning.GetRequest, planning.GetResponse]
	upsert *connect.Client[planning.UpsertRequest, planning.UpsertResponse]
	delete *connect.Client[planning.DeleteRequest, planning.DeleteResponse]
}

// Get calls v1.scheduler.planning.PlanningService.Get.
func (c *planningServiceClient) Get(ctx context.Context, req *connect.Request[planning.GetRequest]) (*connect.Response[planning.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Upsert calls v1.scheduler.planning.PlanningService.Upsert.
func (c *planningServiceClient) Upsert(ctx context.Context, req *connect.Request[planning.UpsertRequest]) (*connect.Response[planning.UpsertResponse], error) {
	return c.upsert.CallUnary(ctx, req)
}

// Delete calls v1.scheduler.planning.PlanningService.Delete.
func (c *planningServiceClient) Delete(ctx context.Context, req *connect.Request[planning.DeleteRequest]) (*connect.Response[planning.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// PlanningServiceHandler is an implementation of the v1.scheduler.planning.PlanningService service.
type PlanningServiceHandler interface {
	Get(context.Context, *connect.Request[planning.GetRequest]) (*connect.Response[planning.GetResponse], error)
	Upsert(context.Context, *connect.Request[planning.UpsertRequest]) (*connect.Response[planning.UpsertResponse], error)
	Delete(context.Context, *connect.Request[planning.DeleteRequest]) (*connect.Response[planning.DeleteResponse], error)
}

// NewPlanningServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlanningServiceHandler(svc PlanningServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	planningServiceMethods := planning.File_v1_scheduler_planning_planning_proto.Services().ByName("PlanningService").Methods()
	planningServiceGetHandler := connect.NewUnaryHandler(
		PlanningServiceGetProcedure,
		svc.Get,
		connect.WithSchema(planningServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	planningServiceUpsertHandler := connect.NewUnaryHandler(
		PlanningServiceUpsertProcedure,
		svc.Upsert,
		connect.WithSchema(planningServiceMethods.ByName("Upsert")),
		connect.WithHandlerOptions(opts...),
	)
	planningServiceDeleteHandler := connect.NewUnaryHandler(
		PlanningServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(planningServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.scheduler.planning.PlanningService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlanningServiceGetProcedure:
			planningServiceGetHandler.ServeHTTP(w, r)
		case PlanningServiceUpsertProcedure:
			planningServiceUpsertHandler.ServeHTTP(w, r)
		case PlanningServiceDeleteProcedure:
			planningServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlanningServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlanningServiceHandler struct{}

func (UnimplementedPlanningServiceHandler) Get(context.Context, *connect.Request[planning.GetRequest]) (*connect.Response[planning.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.planning.PlanningService.Get is not implemented"))
}

func (UnimplementedPlanningServiceHandler) Upsert(context.Context, *connect.Request[planning.UpsertRequest]) (*connect.Response[planning.UpsertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.planning.PlanningService.Upsert is not implemented"))
}

func (UnimplementedPlanningServiceHandler) Delete(context.Context, *connect.Request[planning.DeleteRequest]) (*connect.Response[planning.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.planning.PlanningService.Delete is not implemented"))
}
