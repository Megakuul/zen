// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/scheduler/timer.proto

package schedulerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	scheduler "github.com/megakuul/zen/pkg/api/v1/scheduler"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TimerServiceName is the fully-qualified name of the TimerService service.
	TimerServiceName = "v1.scheduler.TimerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TimerServiceStartProcedure is the fully-qualified name of the TimerService's Start RPC.
	TimerServiceStartProcedure = "/v1.scheduler.TimerService/Start"
	// TimerServiceStopProcedure is the fully-qualified name of the TimerService's Stop RPC.
	TimerServiceStopProcedure = "/v1.scheduler.TimerService/Stop"
)

// TimerServiceClient is a client for the v1.scheduler.TimerService service.
type TimerServiceClient interface {
	Start(context.Context, *connect.Request[scheduler.StartRequest]) (*connect.Response[scheduler.StartResponse], error)
	Stop(context.Context, *connect.Request[scheduler.StopRequest]) (*connect.Response[scheduler.StopResponse], error)
}

// NewTimerServiceClient constructs a client for the v1.scheduler.TimerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTimerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TimerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	timerServiceMethods := scheduler.File_v1_scheduler_timer_proto.Services().ByName("TimerService").Methods()
	return &timerServiceClient{
		start: connect.NewClient[scheduler.StartRequest, scheduler.StartResponse](
			httpClient,
			baseURL+TimerServiceStartProcedure,
			connect.WithSchema(timerServiceMethods.ByName("Start")),
			connect.WithClientOptions(opts...),
		),
		stop: connect.NewClient[scheduler.StopRequest, scheduler.StopResponse](
			httpClient,
			baseURL+TimerServiceStopProcedure,
			connect.WithSchema(timerServiceMethods.ByName("Stop")),
			connect.WithClientOptions(opts...),
		),
	}
}

// timerServiceClient implements TimerServiceClient.
type timerServiceClient struct {
	start *connect.Client[scheduler.StartRequest, scheduler.StartResponse]
	stop  *connect.Client[scheduler.StopRequest, scheduler.StopResponse]
}

// Start calls v1.scheduler.TimerService.Start.
func (c *timerServiceClient) Start(ctx context.Context, req *connect.Request[scheduler.StartRequest]) (*connect.Response[scheduler.StartResponse], error) {
	return c.start.CallUnary(ctx, req)
}

// Stop calls v1.scheduler.TimerService.Stop.
func (c *timerServiceClient) Stop(ctx context.Context, req *connect.Request[scheduler.StopRequest]) (*connect.Response[scheduler.StopResponse], error) {
	return c.stop.CallUnary(ctx, req)
}

// TimerServiceHandler is an implementation of the v1.scheduler.TimerService service.
type TimerServiceHandler interface {
	Start(context.Context, *connect.Request[scheduler.StartRequest]) (*connect.Response[scheduler.StartResponse], error)
	Stop(context.Context, *connect.Request[scheduler.StopRequest]) (*connect.Response[scheduler.StopResponse], error)
}

// NewTimerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTimerServiceHandler(svc TimerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	timerServiceMethods := scheduler.File_v1_scheduler_timer_proto.Services().ByName("TimerService").Methods()
	timerServiceStartHandler := connect.NewUnaryHandler(
		TimerServiceStartProcedure,
		svc.Start,
		connect.WithSchema(timerServiceMethods.ByName("Start")),
		connect.WithHandlerOptions(opts...),
	)
	timerServiceStopHandler := connect.NewUnaryHandler(
		TimerServiceStopProcedure,
		svc.Stop,
		connect.WithSchema(timerServiceMethods.ByName("Stop")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.scheduler.TimerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TimerServiceStartProcedure:
			timerServiceStartHandler.ServeHTTP(w, r)
		case TimerServiceStopProcedure:
			timerServiceStopHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTimerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTimerServiceHandler struct{}

func (UnimplementedTimerServiceHandler) Start(context.Context, *connect.Request[scheduler.StartRequest]) (*connect.Response[scheduler.StartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.TimerService.Start is not implemented"))
}

func (UnimplementedTimerServiceHandler) Stop(context.Context, *connect.Request[scheduler.StopRequest]) (*connect.Response[scheduler.StopResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.TimerService.Stop is not implemented"))
}
