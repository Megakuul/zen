// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/scheduler/planner.proto

package schedulerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	scheduler "github.com/megakuul/zen/pkg/api/v1/scheduler"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PlannerServiceName is the fully-qualified name of the PlannerService service.
	PlannerServiceName = "v1.scheduler.PlannerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlannerServiceGetProcedure is the fully-qualified name of the PlannerService's Get RPC.
	PlannerServiceGetProcedure = "/v1.scheduler.PlannerService/Get"
	// PlannerServiceUpsertProcedure is the fully-qualified name of the PlannerService's Upsert RPC.
	PlannerServiceUpsertProcedure = "/v1.scheduler.PlannerService/Upsert"
	// PlannerServiceDeleteProcedure is the fully-qualified name of the PlannerService's Delete RPC.
	PlannerServiceDeleteProcedure = "/v1.scheduler.PlannerService/Delete"
)

// PlannerServiceClient is a client for the v1.scheduler.PlannerService service.
type PlannerServiceClient interface {
	Get(context.Context, *connect.Request[scheduler.GetRequest]) (*connect.Response[scheduler.GetResponse], error)
	Upsert(context.Context, *connect.Request[scheduler.UpsertRequest]) (*connect.Response[scheduler.UpsertResponse], error)
	Delete(context.Context, *connect.Request[scheduler.DeleteRequest]) (*connect.Response[scheduler.DeleteResponse], error)
}

// NewPlannerServiceClient constructs a client for the v1.scheduler.PlannerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlannerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PlannerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	plannerServiceMethods := scheduler.File_v1_scheduler_planner_proto.Services().ByName("PlannerService").Methods()
	return &plannerServiceClient{
		get: connect.NewClient[scheduler.GetRequest, scheduler.GetResponse](
			httpClient,
			baseURL+PlannerServiceGetProcedure,
			connect.WithSchema(plannerServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		upsert: connect.NewClient[scheduler.UpsertRequest, scheduler.UpsertResponse](
			httpClient,
			baseURL+PlannerServiceUpsertProcedure,
			connect.WithSchema(plannerServiceMethods.ByName("Upsert")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[scheduler.DeleteRequest, scheduler.DeleteResponse](
			httpClient,
			baseURL+PlannerServiceDeleteProcedure,
			connect.WithSchema(plannerServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// plannerServiceClient implements PlannerServiceClient.
type plannerServiceClient struct {
	get    *connect.Client[scheduler.GetRequest, scheduler.GetResponse]
	upsert *connect.Client[scheduler.UpsertRequest, scheduler.UpsertResponse]
	delete *connect.Client[scheduler.DeleteRequest, scheduler.DeleteResponse]
}

// Get calls v1.scheduler.PlannerService.Get.
func (c *plannerServiceClient) Get(ctx context.Context, req *connect.Request[scheduler.GetRequest]) (*connect.Response[scheduler.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Upsert calls v1.scheduler.PlannerService.Upsert.
func (c *plannerServiceClient) Upsert(ctx context.Context, req *connect.Request[scheduler.UpsertRequest]) (*connect.Response[scheduler.UpsertResponse], error) {
	return c.upsert.CallUnary(ctx, req)
}

// Delete calls v1.scheduler.PlannerService.Delete.
func (c *plannerServiceClient) Delete(ctx context.Context, req *connect.Request[scheduler.DeleteRequest]) (*connect.Response[scheduler.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// PlannerServiceHandler is an implementation of the v1.scheduler.PlannerService service.
type PlannerServiceHandler interface {
	Get(context.Context, *connect.Request[scheduler.GetRequest]) (*connect.Response[scheduler.GetResponse], error)
	Upsert(context.Context, *connect.Request[scheduler.UpsertRequest]) (*connect.Response[scheduler.UpsertResponse], error)
	Delete(context.Context, *connect.Request[scheduler.DeleteRequest]) (*connect.Response[scheduler.DeleteResponse], error)
}

// NewPlannerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlannerServiceHandler(svc PlannerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	plannerServiceMethods := scheduler.File_v1_scheduler_planner_proto.Services().ByName("PlannerService").Methods()
	plannerServiceGetHandler := connect.NewUnaryHandler(
		PlannerServiceGetProcedure,
		svc.Get,
		connect.WithSchema(plannerServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	plannerServiceUpsertHandler := connect.NewUnaryHandler(
		PlannerServiceUpsertProcedure,
		svc.Upsert,
		connect.WithSchema(plannerServiceMethods.ByName("Upsert")),
		connect.WithHandlerOptions(opts...),
	)
	plannerServiceDeleteHandler := connect.NewUnaryHandler(
		PlannerServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(plannerServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.scheduler.PlannerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlannerServiceGetProcedure:
			plannerServiceGetHandler.ServeHTTP(w, r)
		case PlannerServiceUpsertProcedure:
			plannerServiceUpsertHandler.ServeHTTP(w, r)
		case PlannerServiceDeleteProcedure:
			plannerServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlannerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlannerServiceHandler struct{}

func (UnimplementedPlannerServiceHandler) Get(context.Context, *connect.Request[scheduler.GetRequest]) (*connect.Response[scheduler.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.PlannerService.Get is not implemented"))
}

func (UnimplementedPlannerServiceHandler) Upsert(context.Context, *connect.Request[scheduler.UpsertRequest]) (*connect.Response[scheduler.UpsertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.PlannerService.Upsert is not implemented"))
}

func (UnimplementedPlannerServiceHandler) Delete(context.Context, *connect.Request[scheduler.DeleteRequest]) (*connect.Response[scheduler.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.PlannerService.Delete is not implemented"))
}
