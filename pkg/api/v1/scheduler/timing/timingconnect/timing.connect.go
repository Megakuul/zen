// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/scheduler/timing/timing.proto

package timingconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	timing "github.com/megakuul/zen/pkg/api/v1/scheduler/timing"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TimingServiceName is the fully-qualified name of the TimingService service.
	TimingServiceName = "v1.scheduler.timing.TimingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TimingServiceStartProcedure is the fully-qualified name of the TimingService's Start RPC.
	TimingServiceStartProcedure = "/v1.scheduler.timing.TimingService/Start"
	// TimingServiceStopProcedure is the fully-qualified name of the TimingService's Stop RPC.
	TimingServiceStopProcedure = "/v1.scheduler.timing.TimingService/Stop"
)

// TimingServiceClient is a client for the v1.scheduler.timing.TimingService service.
type TimingServiceClient interface {
	Start(context.Context, *connect.Request[timing.StartRequest]) (*connect.Response[timing.StartResponse], error)
	Stop(context.Context, *connect.Request[timing.StopRequest]) (*connect.Response[timing.StopResponse], error)
}

// NewTimingServiceClient constructs a client for the v1.scheduler.timing.TimingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTimingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TimingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	timingServiceMethods := timing.File_v1_scheduler_timing_timing_proto.Services().ByName("TimingService").Methods()
	return &timingServiceClient{
		start: connect.NewClient[timing.StartRequest, timing.StartResponse](
			httpClient,
			baseURL+TimingServiceStartProcedure,
			connect.WithSchema(timingServiceMethods.ByName("Start")),
			connect.WithClientOptions(opts...),
		),
		stop: connect.NewClient[timing.StopRequest, timing.StopResponse](
			httpClient,
			baseURL+TimingServiceStopProcedure,
			connect.WithSchema(timingServiceMethods.ByName("Stop")),
			connect.WithClientOptions(opts...),
		),
	}
}

// timingServiceClient implements TimingServiceClient.
type timingServiceClient struct {
	start *connect.Client[timing.StartRequest, timing.StartResponse]
	stop  *connect.Client[timing.StopRequest, timing.StopResponse]
}

// Start calls v1.scheduler.timing.TimingService.Start.
func (c *timingServiceClient) Start(ctx context.Context, req *connect.Request[timing.StartRequest]) (*connect.Response[timing.StartResponse], error) {
	return c.start.CallUnary(ctx, req)
}

// Stop calls v1.scheduler.timing.TimingService.Stop.
func (c *timingServiceClient) Stop(ctx context.Context, req *connect.Request[timing.StopRequest]) (*connect.Response[timing.StopResponse], error) {
	return c.stop.CallUnary(ctx, req)
}

// TimingServiceHandler is an implementation of the v1.scheduler.timing.TimingService service.
type TimingServiceHandler interface {
	Start(context.Context, *connect.Request[timing.StartRequest]) (*connect.Response[timing.StartResponse], error)
	Stop(context.Context, *connect.Request[timing.StopRequest]) (*connect.Response[timing.StopResponse], error)
}

// NewTimingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTimingServiceHandler(svc TimingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	timingServiceMethods := timing.File_v1_scheduler_timing_timing_proto.Services().ByName("TimingService").Methods()
	timingServiceStartHandler := connect.NewUnaryHandler(
		TimingServiceStartProcedure,
		svc.Start,
		connect.WithSchema(timingServiceMethods.ByName("Start")),
		connect.WithHandlerOptions(opts...),
	)
	timingServiceStopHandler := connect.NewUnaryHandler(
		TimingServiceStopProcedure,
		svc.Stop,
		connect.WithSchema(timingServiceMethods.ByName("Stop")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.scheduler.timing.TimingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TimingServiceStartProcedure:
			timingServiceStartHandler.ServeHTTP(w, r)
		case TimingServiceStopProcedure:
			timingServiceStopHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTimingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTimingServiceHandler struct{}

func (UnimplementedTimingServiceHandler) Start(context.Context, *connect.Request[timing.StartRequest]) (*connect.Response[timing.StartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.timing.TimingService.Start is not implemented"))
}

func (UnimplementedTimingServiceHandler) Stop(context.Context, *connect.Request[timing.StopRequest]) (*connect.Response[timing.StopResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.scheduler.timing.TimingService.Stop is not implemented"))
}
